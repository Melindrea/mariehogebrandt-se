#!/bin/sh

# http://gmurphey.com/2012/12/22/grunt-pre-commit-hook-for-release-tasks.html
# stash unstaged changes, run release task, stage release updates and
# restore stashed files
# Should now hopefully have correct line endings...
NAME=$(git branch | grep '*' | sed 's/* //')

# don't run on rebase
if [ $NAME != '(no branch)' ]; then
    if git diff-index --quiet HEAD --; then
        # no changes between index and working copy; just run tests
        grunt commit

        RETVAL=$?

        if [ $RETVAL -ne 0 ]; then
            exit 1
        fi

        git add .
    else
        # Test the version that's about to be committed,
        # stashing all unindexed changes
        git stash -q --keep-index
        grunt commit

        RETVAL=$?

        if [ $RETVAL -ne 0 ]; then
            exit 1
        fi

        git add .
        git stash pop -q
    fi
fi

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ascii filenames set this variable to true.
allownonascii=$(git config hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
      LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    echo "Error: Attempt to add a non-ascii file name."
    echo
    echo "This can cause problems if you want to work"
    echo "with people on other platforms."
    echo
    echo "To be portable it is advisable to rename the file ..."
    echo
    echo "If you know what you are doing you can disable this"
    echo "check using:"
    echo
    echo "  git config hooks.allownonascii true"
    echo
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
# exec git diff-index --check --cached $against --
